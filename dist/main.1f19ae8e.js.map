{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","console","log","push","toUpperCase","onbeforeunload","string","stringify","setItem"],"mappings":"AAAA,IAAMA,SAAS,GAAGC,CAAC,CAAC,WAAD,CAAnB,EAAgC;;AAChC,IAAMC,OAAO,GAAGF,SAAS,CAACG,IAAV,CAAe,SAAf,CAAhB,EAAyC;;AACzC,IAAMC,CAAC,GAAGC,YAAY,CAACC,OAAb,CAAqB,GAArB,CAAV,EAAmC;;AACnC,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,CAAX,CAAhB,EAA6B;;AAC7B,IAAMM,OAAO,GAAGH,OAAO,IAAI;AAC3B,CAAC;AACD;AAACI,EAAAA,IAAI,EAAG,GAAR;AAAYC,EAAAA,GAAG,EAAE;AAAjB,CADA,EAEA;AAACD,EAAAA,IAAI,EAAG,GAAR;AAAYC,EAAAA,GAAG,EAAE;AAAjB,CAFA,EAGA;AAACD,EAAAA,IAAI,EAAG,GAAR;AAAYC,EAAAA,GAAG,EAAE;AAAjB,CAHA,CADA;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACD,GAAD,EAAS;AACzB,SAAOA,GAAG,CAACE,OAAJ,CAAY,SAAZ,EAAsB,EAAtB,EAA0BA,OAA1B,CAAkC,UAAlC,EAA6C,EAA7C,EAAiDA,OAAjD,CAAyD,MAAzD,EAAgE,EAAhE,EAAoEA,OAApE,CAA4E,MAA5E,EAAmF,EAAnF,CAAP,CADyB,CACoE;AAChG,CAFD;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAI;AACff,EAAAA,SAAS,CAACG,IAAV,CAAe,eAAf,EAAgCa,MAAhC,GADe,CACyB;;AACxCN,EAAAA,OAAO,CAACO,OAAR,CAAgB,UAACC,IAAD,EAAMC,KAAN,EAAgB;AAC5B,QAAMC,GAAG,GAAGnB,CAAC,6EAESiB,IAAI,CAACP,IAFd,mDAGSE,WAAW,CAACK,IAAI,CAACN,GAAN,CAHpB,uNAAD,CAYJS,YAZI,CAYSnB,OAZT,CAAZ;AAaAkB,IAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAe,YAAM;AACjBC,MAAAA,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACN,GAAjB,EAAqB,OAArB;AACH,KAFD;AAGAQ,IAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAe,QAAf,EAAwB,UAACG,CAAD,EAAO;AAC3BA,MAAAA,CAAC,CAACC,eAAF;AACAhB,MAAAA,OAAO,CAACiB,MAAR,CAAeR,KAAf,EAAqB,CAArB;AACAJ,MAAAA,MAAM;AACT,KAJD;AAKH,GAtBD;AAuBH,CAzBD;;AA0BAA,MAAM,IAAE;;AACRd,CAAC,CAAC,YAAD,CAAD,CACKqB,EADL,CACQ,OADR,EACgB,YAAM;AAAC;AACf,MAAIV,GAAG,GAAGW,MAAM,CAACK,MAAP,CAAc,YAAd,CAAV;;AACA,MAAGhB,GAAG,CAACiB,OAAJ,CAAY,OAAZ,MAAyB,CAA5B,EAA+B;AAAC;AAC5BjB,IAAAA,GAAG,GAAG,aAAaA,GAAnB;AACH;;AACDkB,EAAAA,OAAO,CAACC,GAAR,CAAYnB,GAAZ;AACAF,EAAAA,OAAO,CAACsB,IAAR,CAAa;AACTrB,IAAAA,IAAI,EAAGE,WAAW,CAACD,GAAD,CAAX,CAAiB,CAAjB,EAAoBqB,WAApB,EADE;AAETrB,IAAAA,GAAG,EAAGA;AAFG,GAAb;AAICG,EAAAA,MAAM;AACV,CAZL;;AAaIQ,MAAM,CAACW,cAAP,GAAwB,YAAM;AAAC;AAC3B,MAAMC,MAAM,GAAG3B,IAAI,CAAC4B,SAAL,CAAe1B,OAAf,CAAf,CAD0B,CACY;;AACtCL,EAAAA,YAAY,CAACgC,OAAb,CAAqB,GAArB,EAAyBF,MAAzB,EAF0B,CAEM;AACnC,CAHD,EAIA","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $('.siteList')//获取类为siteList\r\nconst $lastLi = $siteList.find('li.last')//在siteList中找到li里面的类为last的元素\r\nconst x = localStorage.getItem('x')//把x从localStorage里面取出来\r\nconst xObject = JSON.parse(x)//把x变为对象\r\nconst hashMap = xObject || //当xObject第一次操作时为空，就用下面的代码作为出是值\r\n[//要注意，hashMap是全局变量，不要被污染了。因为我们开了parcel，parcel默认帮我们开了一个作用域，所以不用担心这个问题\r\n{logo : 'A',url :'https://www.acfun.cn'},\r\n{logo : 'B',url :'https://www.bilibili.com'},\r\n{logo : 'Z',url :'https://www.zhihu.com'},\r\n]\r\nconst simplifyUrl = (url) => {\r\n    return url.replace('http://','').replace('https://','').replace('www.','').replace(/\\/.*/,'')//把http，https，www,/去除加一个空\r\n}\r\nconst render = ()=>{\r\n    $siteList.find('li:not(.last)').remove()//删除除了last的所有元素，因为会重复保存之前的元素\r\n    hashMap.forEach((node,index) => {\r\n        const $li = $(`<li>\r\n        <div class=\"site\">\r\n          <div class=\"logo\">${node.logo}</div>\r\n          <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n          <div class=\"close\">\r\n          <svg class=\"icon\" >\r\n          <use xlink:href=\"#icon-close\">\r\n          </use>\r\n      </svg>\r\n          </div>\r\n        </div>\r\n      </a>\r\n        </li>`).insertBefore($lastLi)\r\n        $li.on('click',() => {\r\n            window.open(node.url,'_self')\r\n        })\r\n        $li.on('click','.close',(e) => {\r\n            e.stopPropagation()\r\n            hashMap.splice(index,1)\r\n            render()\r\n        })\r\n    })\r\n}\r\nrender()//然后遍历这个hashMap，直接创建li，这样就不用再HTML里面写了\r\n$('.addButton')\r\n    .on('click',() => {//监听点击\r\n        let url = window.prompt('请输入需要添加的网址')\r\n        if(url.indexOf('https') !== 0 ){//如果用户输入的不是http开头的，帮他加上\r\n            url = 'https://' + url\r\n        }\r\n        console.log(url);\r\n        hashMap.push({\r\n            logo : simplifyUrl(url)[0].toUpperCase(),\r\n            url : url\r\n        })\r\n         render() \r\n    })\r\n    window.onbeforeunload = () => {//监听用户关闭页面\r\n        const string = JSON.stringify(hashMap)//localStorage只能存字符串，要把hashMap变成字符串\r\n        localStorage.setItem('x',string)//在本地的存储里面设置一个x，值为string\r\n    }\r\n    //监听用户关闭页面，在页面关闭的时候把hashMap存到localStorage里面你"]}